"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RedisModule_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisModule = void 0;
const common_1 = require("@nestjs/common");
const redis_provider_1 = require("./redis.provider");
const redis_config_1 = require("./redis.config");
const redis_client_1 = require("./redis.client");
let RedisModule = RedisModule_1 = class RedisModule {
    static forRoot(options) {
        RedisModule_1._module = {
            module: RedisModule_1,
            providers: [
                redis_provider_1.RedisProvider,
                {
                    provide: redis_config_1.REDIS_OPTIONS,
                    useValue: options,
                },
                {
                    provide: redis_client_1.REDIS_CLIENT,
                    useFactory: async (redisProvider) => await redisProvider.getClient(),
                    inject: [redis_provider_1.RedisProvider],
                },
            ],
            exports: [redis_client_1.REDIS_CLIENT],
        };
        return RedisModule_1._module;
    }
    static forRootAsync(options) {
        RedisModule_1._module = {
            imports: options.imports,
            module: RedisModule_1,
            providers: [
                redis_provider_1.RedisProvider,
                this.createConfigProviders(options),
                {
                    provide: redis_client_1.REDIS_CLIENT,
                    useFactory: async (redisProvider) => await redisProvider.getClient(),
                    inject: [redis_provider_1.RedisProvider],
                },
            ],
            exports: [redis_client_1.REDIS_CLIENT],
        };
        return RedisModule_1._module;
    }
    static forFeature() {
        return RedisModule_1._module;
    }
    static createConfigProviders(options) {
        return {
            provide: redis_config_1.REDIS_OPTIONS,
            useFactory: options.useFactory,
            inject: options.inject,
        };
    }
};
RedisModule = RedisModule_1 = __decorate([
    (0, common_1.Module)({})
], RedisModule);
exports.RedisModule = RedisModule;
//# sourceMappingURL=redis.module.js.map