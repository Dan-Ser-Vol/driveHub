"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var RedisProvider_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisProvider = void 0;
const common_1 = require("@nestjs/common");
const redis_config_1 = require("./redis.config");
const redis_1 = require("redis");
const redis_client_1 = require("./redis.client");
let RedisProvider = RedisProvider_1 = class RedisProvider {
    constructor(options) {
        this.options = options;
    }
    async getClient() {
        if (this.client)
            return this.client;
        this.client = (0, redis_1.createClient)(this.options);
        this.client.on("error", (error) => {
            common_1.Logger.error(error.message, error.stack, redis_client_1.REDIS_CLIENT);
        });
        this.client.on("connect", () => {
            common_1.Logger.verbose(this.options, RedisProvider_1.name);
            common_1.Logger.log("client connected", redis_client_1.REDIS_CLIENT);
        });
        await this.client.connect();
        return this.client;
    }
};
RedisProvider = RedisProvider_1 = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Optional)()),
    __param(0, (0, common_1.Inject)(redis_config_1.REDIS_OPTIONS)),
    __metadata("design:paramtypes", [Object])
], RedisProvider);
exports.RedisProvider = RedisProvider;
//# sourceMappingURL=redis.provider.js.map